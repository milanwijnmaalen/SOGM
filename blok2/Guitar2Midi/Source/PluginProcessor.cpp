/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "onset.h"
#include "bandpassfilter.h"


//==============================================================================
Guitar2midiAudioProcessor::Guitar2midiAudioProcessor()
{
	for (size_t i = 0; i < 24; i++)
	{
		tomidi[i].setup(48 + i); //midinote 48 - 72
	}
}

Guitar2midiAudioProcessor::~Guitar2midiAudioProcessor()
{
}

//==============================================================================
const String Guitar2midiAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int Guitar2midiAudioProcessor::getNumParameters()
{
    return 0;
}

float Guitar2midiAudioProcessor::getParameter (int index)
{
    return 0.0f;
}

void Guitar2midiAudioProcessor::setParameter (int index, float newValue)
{
}

const String Guitar2midiAudioProcessor::getParameterName (int index)
{
    return String();
}

const String Guitar2midiAudioProcessor::getParameterText (int index)
{
    return String();
}

const String Guitar2midiAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String Guitar2midiAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool Guitar2midiAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool Guitar2midiAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool Guitar2midiAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool Guitar2midiAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool Guitar2midiAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double Guitar2midiAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int Guitar2midiAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int Guitar2midiAudioProcessor::getCurrentProgram()
{
    return 0;
}

void Guitar2midiAudioProcessor::setCurrentProgram (int index)
{
}

const String Guitar2midiAudioProcessor::getProgramName (int index)
{
    return String();
}

void Guitar2midiAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void Guitar2midiAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
}

void Guitar2midiAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void Guitar2midiAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
	buffersize = buffer.getNumSamples();


	rms = buffer.getRMSLevel(0, 0, buffer.getNumSamples());

	for (size_t i = 0; i < 24; i++)
	{
		tomidi[i].execute(&buffer, &midiMessages, getSampleRate(), threshold, offtreshold, &nummessagessent, mindt,keysc);
	}

	AudioSampleBuffer* toplot = &diff2;

	float newpeak = 0;

	for (size_t i = 0; i < toplot->getNumSamples(); i++)
	{
		if (toplot->getSample(0, i) == 0)
		{
			aantalnullen += 1;
		}
		else if (toplot->getSample(0, i) > 0)
		{
			aantalpositief += 1;
		}
		else
		{
			aantalnegatief += 1;
		}


		if (toplot->getSample(0, i) > newpeak)
		{
			newpeak = toplot->getSample(0, i);
		}
	}
	if (newpeak > peak)
	{
		peak = newpeak;
	}


}

//==============================================================================
bool Guitar2midiAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* Guitar2midiAudioProcessor::createEditor()
{
    return new Guitar2midiAudioProcessorEditor (*this);
}

//==============================================================================
void Guitar2midiAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void Guitar2midiAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new Guitar2midiAudioProcessor();
}
